openapi: 3.0.3
info:
  title: Fan Engage API
  version: 0.4.0
servers:
  - url: http://localhost:8000

paths:
  /health:
    get:
      summary: Health check
      responses:
        '200':
          description: ok
  /matches:
    get:
      summary: List matches
      responses:
        '200':
          description: List of matches
  /ingest/video:
    post:
      summary: Upload a match video (MP4)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title: { type: string }
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Ingested
  /analyze/detections:
    get:
      summary: Run detection + tracking for a match (synchronous MVP)
      parameters:
        - in: query
          name: match_id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Detection job result (uploaded artifact key)
          content:
            application/json:
              schema:
                type: object
                properties:
                  match_id: { type: integer }
                  key: { type: string, description: "MinIO key to Parquet (detections/match_<id>/match_<id>.parquet)" }
  /matches/{match_id}/detections:
    get:
      summary: Get detections for a match (YOLO + ByteTrack)
      parameters:
        - in: path
          name: match_id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Array of detection records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Detection'
  /teams/assign:
    post:
      summary: Assign team_id to player tracks for a match
      description: >
        Computes team assignments from jersey embeddings + color histograms and
        persists `tracks/match_{id}/match_{id}.parquet` to object storage.
      parameters:
        - in: query
          name: match_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Assignment summary
          content:
            application/json:
              schema:
                type: object
                properties:
                  match_id: { type: integer }
                  tracks: { type: integer }
                  by_team:
                    type: object
                    additionalProperties:
                      type: integer
                required: [match_id, tracks]
              examples:
                ok:
                  value:
                    match_id: 14
                    tracks: 12
                    by_team: { "1": 6, "2": 6 }
        '500':
          description: Assignment failed
  /matches/{match_id}/tracks:
    get:
      summary: Get team assignments (tracks) for a match
      parameters:
        - in: path
          name: match_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of track assignments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
              examples:
                sample:
                  value:
                    - match_id: 14
                      object_id: 7
                      team_id: 1
                      n_samples: 8
                    - match_id: 14
                      object_id: 12
                      team_id: 2
                      n_samples: 8
        '404':
          description: Tracks parquet not found

components:
  schemas:
    Detection:
      type: object
      description: YOLO detection enriched with ByteTrack stable IDs
      properties:
        frame_id:
          type: integer
          description: Zero-based frame index (1 fps extraction)
        filename:
          type: string
          description: Frame object key in MinIO
        class_name:
          type: string
          description: YOLO class label (e.g., "person", "ball")
        confidence:
          type: number
          format: float
          nullable: true
          description: Detection confidence (0–1), may be null if unavailable
        x1: { type: number }
        y1: { type: number }
        x2: { type: number }
        y2: { type: number }
        object_id:
          type: integer
          nullable: true
          description: Stable tracker ID; null if tracker didn’t assign
      required: [frame_id, filename, class_name, x1, y1, x2, y2]
    Track:
      type: object
      properties:
        match_id:
          type: integer
          example: 14
        object_id:
          type: integer
          description: Stable track id from ByteTrack
          example: 23
        team_id:
          type: integer
          enum: [1, 2]
          example: 1
        n_samples:
          type: integer
          description: Number of crop samples used for the assignment
          example: 8
      required: [match_id, object_id, team_id]
